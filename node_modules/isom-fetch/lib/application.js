'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createContext = createContext;
exports.respond = respond;
exports.serverSideMethod = serverSideMethod;

var _process = require('process');

var _process2 = _interopRequireDefault(_process);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _mask = require('./mask');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 创造一个假的中间件执行环境
 *
 * @param option {Object} 请求参数
 * @param defaults {Object} 默认请求参数
 * @returns {Object} 执行环境，即中间件的 this
 */
function createContext(option, defaults) {
  var context = Object.create(this);
  var request = context.request = Object.create(this.request);
  var response = context.response = Object.create(this.response);

  context.app = request.app = response.app = this.app;
  context.req = request.req = response.req = (0, _mask.getRequest)(defaults, option);
  context.res = request.res = response.res = (0, _mask.getResponse)();
  request.ctx = response.ctx = context;
  request.response = response;
  response.request = request;
  // 配合 bodyParser，将数据绑到 body 上
  context.request.body = context.req.body;

  context.onerror = context.onerror.bind(context);
  context.originalUrl = request.originalUrl = context.req.url;

  context.state = {};
  return context;
}

/**
 * 处理 respond，不使用 res.send 而是直接返回 body 的值
 *
 * @returns {*} 返回 body 的值
 */
function respond() {
  if (this.method === 'HEAD') {
    return null;
  }

  return this.body || null;
}

/**
 * 服务端方法装饰器，在浏览器环境下使用时抛出异常
 *
 * @param target
 * @param name
 * @param descriptor
 * @returns {*}
 */
function serverSideMethod(target, name, descriptor) {
  var desc = descriptor;
  var method = desc.value;

  desc.value = function des() {
    (0, _invariant2.default)(!_process2.default.browser, 'method \'fetch#' + name + '\' cannot work in browser');

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return method.apply(this, args);
  };

  return desc;
}