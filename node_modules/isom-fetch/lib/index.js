'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getURLStateName = exports.reduxIsomFetch = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _desc, _value, _class;

var _process = require('process');

var _process2 = _interopRequireDefault(_process);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _co = require('co');

var _co2 = _interopRequireDefault(_co);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

require('es6-promise');

var _mask = require('./mask');

var _compose = require('./compose');

var _compose2 = _interopRequireDefault(_compose);

var _middleware = require('./middleware');

var _middleware2 = _interopRequireDefault(_middleware);

var _defaults = require('./defaults');

var _application = require('./application');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

var isBrowser = _process2.default.browser;

/**
 * 在服务端环境下，fetch 需要保持单例模式
 * 由于 react 渲染是同步的，因此在一次 SSR 过程中是正确的
 */
var singleton = null;

var Fetch = (_class = function () {
  function Fetch() {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    (0, _classCallCheck3.default)(this, Fetch);

    this.options = options;
    this.thunk = !!options.thunk;
    this.axios = _axios2.default.create(options);
  }

  (0, _createClass3.default)(Fetch, [{
    key: 'request',
    value: function request() {}
  }, {
    key: 'get',
    value: function get() {}
  }, {
    key: 'post',
    value: function post() {}
  }, {
    key: 'patch',
    value: function patch() {}
  }, {
    key: 'delete',
    value: function _delete() {}
  }, {
    key: 'head',
    value: function head() {}
  }, {
    key: 'put',
    value: function put() {}

    /**
     * 在服务器环境下生成一个单例的 fetch
     *
     * @param ctx {Object} koa 的 app 实例
     * @param router {Router} koa-router 对象
     * @return {Fetch} 返回一个 fetch 的单例对象
     */

  }, {
    key: 'use',
    value: function use(ctx, router) {
      // TODO: 对 ctx 实例进行简单的校验吧
      this.ctx = ctx;
      this.router = router;
      this.fetchCollection = [];
      this.urlCollection = {};
      return this;
    }

    /**
     * 使用后端中间件充当请求体，并记录返回的 promise
     *
     * @param options {Object} 请求内容
     * @param defaults {Object}  默认配置请求参数
     * @return {Promise} 返回一个 promise，请求的返回值
     */

  }, {
    key: 'dispatch',
    value: function dispatch(options, defaults) {
      var context = _application.createContext.call(this.ctx, options, defaults);
      var fn = _co2.default.wrap((0, _compose2.default)([this.router.routes()]));
      var promise = fn.call(context).then(function () {
        return _application.respond.call(context);
      });
      this.fetchCollection.push(promise);

      // 记录已渲染的 url
      if (typeof this.urlCollection[context.req.url] === 'number') {
        this.urlCollection[context.req.url]++;
      } else {
        this.urlCollection[context.req.url] = 1;
      }
      return promise;
    }

    /**
     * 执行完所有请求的处理结果
     *
     * @param [callback] {Function} 回调函数
     * @returns {Promise} 返回所有请求执行完成的情况
     */

  }, {
    key: 'all',
    value: function all(callback) {
      var promise = Promise.all(singleton.fetchCollection);
      singleton = null;

      return typeof callback === 'function' ? promise.then(callback) : promise;
    }
  }]);
  return Fetch;
}(), (_applyDecoratedDescriptor(_class.prototype, 'request', [fetchDecorator], Object.getOwnPropertyDescriptor(_class.prototype, 'request'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'get', [fetchDecorator], Object.getOwnPropertyDescriptor(_class.prototype, 'get'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'post', [fetchDecorator], Object.getOwnPropertyDescriptor(_class.prototype, 'post'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'patch', [fetchDecorator], Object.getOwnPropertyDescriptor(_class.prototype, 'patch'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'delete', [fetchDecorator], Object.getOwnPropertyDescriptor(_class.prototype, 'delete'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'head', [fetchDecorator], Object.getOwnPropertyDescriptor(_class.prototype, 'head'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'put', [fetchDecorator], Object.getOwnPropertyDescriptor(_class.prototype, 'put'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'use', [_application.serverSideMethod], Object.getOwnPropertyDescriptor(_class.prototype, 'use'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'dispatch', [_application.serverSideMethod], Object.getOwnPropertyDescriptor(_class.prototype, 'dispatch'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'all', [_application.serverSideMethod], Object.getOwnPropertyDescriptor(_class.prototype, 'all'), _class.prototype)), _class);

/**
 * 装饰器方法，统一处理所有 method 请求别名
 *
 * @param target
 * @param name
 * @param descriptor
 * @returns {Promise}
 */

function fetchDecorator(target, name, descriptor) {
  var desc = descriptor;
  desc.value = function des() {
    var _this = this;

    var result = void 0;

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    switch (name) {
      case 'request':
        result = args[0];
        break;
      case 'get':
      case 'delete':
      case 'head':
        {
          var url = args[0];
          var _args$ = args[1];
          var config = _args$ === undefined ? {} : _args$;

          config.url = url;
          config.method = name.toUpperCase();
          result = config;
          break;
        }
      default:
        {
          var _url = args[0];
          var _args$2 = args[1];
          var data = _args$2 === undefined ? {} : _args$2;
          var _args$3 = args[2];

          var _config = _args$3 === undefined ? {} : _args$3;

          _config.url = _url;
          _config.method = name.toUpperCase();
          _config.data = (0, _extends3.default)({}, _config.data, data);
          result = _config;
          break;
        }
    }

    if (isBrowser) {
      if (this.thunk) {
        var payload = function payload(dispatch, action) {
          _this.axios.request(result).then(function (resp) {
            return dispatch({
              type: action.type,
              payload: resp.data
            });
          });
        };
        payload.isomFetch = true;
        payload.url = (0, _mask.getURL)((0, _extends3.default)({}, this.options, result));
        return payload;
      }
      return this.axios.request(result).then(function (resp) {
        return resp.data;
      });
    }

    // 在没有单例的时候直接解决一下
    if (!singleton) return Promise.resolve();
    // 在服务端需要使用单例的 dispatch
    return singleton.dispatch(result, this.options);
  };
  return desc;
}

exports.default = {

  /**
   * 在服务器环境下生成一个单例的 fetch
   *
   * @param ctx {Object} koa 的 app 实例
   * @param router {Router} koa-router 对象
   * @return {Fetch} 返回一个 fetch 的单例对象
   */

  use: function use(ctx, router) {
    singleton = new Fetch();
    singleton.use(ctx, router);
    return singleton;
  },


  /**
   * 返回新的 fetch 实例
   *
   * @param options {Object} 配置属性
   * @return {Fetch} 新的 fetch 实例
   */
  create: function create(options) {
    return new Fetch(options);
  }
};
exports.reduxIsomFetch = _middleware2.default;
exports.getURLStateName = _defaults.getUrlState;